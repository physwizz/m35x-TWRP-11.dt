#!/system/bin/sh

perform_resize_and_unshare_blocks() {
    resize2fs "system.img" 7G
    e2fsck -E unshare_blocks "system.img"
    resize2fs -M "system.img"
}

list_directory_contents() {
    directory="$1"
    if [ -d "$directory" ]; then
        cd "$directory" || return 1
        files=$(ls -d -A -I '.*' *.{img,zip,xz} */ 2>/dev/null)
        count=1
        for file in $files; do
            echo "$count. $file"
            last_option=$count  # Guardamos el número de la última opción
            ((count++))
        done
    else
        echo "Directory not found: $directory"
    fi
}

process_user_selected_image() {
    echo "Enter the full path of the image file or directory (default: /sdcard):"
    echo "Enter '.' to use the default directory."
    echo -n "> "
    read image_path

    # If no path is provided, default to /sdcard
    if [ -z "$image_path" ] || [ "$image_path" = "." ]; then
        image_path="/sdcard"
    fi

    selected_index=1
    selected_symbol="O"
    original_file=""

    while true; do
        clear
        echo "Contents of $image_path:"

        list_directory_contents "$image_path" | awk -v idx="$selected_index" -v sym="$selected_symbol" '{if (NR==idx) print sym, $0; else print " ", $0}'

        read -rsn1 input

        if [ "$input" = "q" ]; then
            break
        elif [ "$input" = $'\x1b' ]; then
            read -rsn2 input
            if [ "$input" = $'\x5b\x41' ]; then
                ((selected_index--))
            elif [ "$input" = $'\x5b\x42' ]; then
                ((selected_index++))
            elif [ "$input" = $'\x5b\x44' ]; then
                # Allow moving back only if not in /sdcard or /data
                if [ "$image_path" != "/sdcard" ] && [ "$image_path" != "/data" ]; then
                    cd "$(dirname "$image_path")"
                    image_path=$(pwd)
                    echo "Current directory: $image_path"
                    selected_index=1
                elif [ "$image_path" = "/sdcard" ]; then
                    image_path="/data"
                    echo "Current directory: $image_path"
                    selected_index=1
                fi
            elif [ "$input" = $'\x5b\x43' ]; then
                selected_file=$(list_directory_contents "$image_path" | awk "NR==$selected_index{print}" | cut -d " " -f 2-)
                if [ -d "$image_path/$selected_file" ]; then
                    image_path="$image_path/$selected_file"
                    echo "Current directory: $image_path"
                    selected_index=1
                elif [ -f "$image_path/$selected_file" ]; then
                    original_file="$selected_file"
                    if [[ "$selected_file" == *.img ]]; then
                        echo "Processing File: $image_path/$selected_file"
                        echo "Press any key to continue..."
                        read -rsn1
                        mv "$image_path/$selected_file" "$image_path/system.img"
                        perform_resize_and_unshare_blocks
                        mv "$image_path/system.img" "$image_path/$original_file"
                        list_directory_contents "$image_path"
                        break
                    elif [[ "$selected_file" == *.zip ]]; then
                        echo "Uncompressing File: $image_path/$selected_file..."
                        unzip "$image_path/$selected_file" -d "$image_path"
                        selected_file=$(ls -t "$image_path" | head -1)
                        if [[ "$selected_file" == *.img ]]; then
                            echo "Processing File: $image_path/$selected_file"
                            echo "Press any key to continue..."
                            read -rsn1
                            mv "$image_path/$selected_file" "$image_path/system.img"
                            perform_resize_and_unshare_blocks
                            mv "$image_path/system.img" "$image_path/$original_file"
                            list_directory_contents "$image_path"
                            break
                        fi
                    elif [[ "$selected_file" == *.xz ]]; then
                        echo "Uncompressing File: $image_path/$selected_file..."
                        xz -d "$image_path/$selected_file"
                        selected_file=$(ls -t "$image_path" | head -1)
                        if [[ "$selected_file" == *.img ]]; then
                            echo "Processing File: $image_path/$selected_file"
                            echo "Press any key to continue..."
                            read -rsn1
                            mv "$image_path/$selected_file" "$image_path/system.img"
                            perform_resize_and_unshare_blocks
                            mv "$image_path/system.img" "$image_path/$original_file"
                            list_directory_contents "$image_path"
                            break
                        fi
                    fi
                fi
            fi
        fi

        if [ "$selected_index" -lt 1 ]; then
            selected_index=1  # Ajustamos el cursor para que no sea menor que 1
        fi
    done
}

process_copied_system_image() {
    cp /dev/block/mapper/system /sdcard/system.img

    perform_resize_and_unshare_blocks
}

echo "Select an option:"
echo "1. Process the user-selected image."
echo "2. Process a copy of the installed system image."

read -r option

case $option in
    1)
        process_user_selected_image
        ;;
    2)
        process_copied_system_image
        ;;
    *)
        echo "Invalid option."
esac